#!/usr/bin/env python2

# the AGS script compiler basically doesn't optimize at all,
# and the code it emits is super-naive and redundant.
# the register bx is most often used only as a temporary
# storage and discarded immediately after doing one basic op.
# therefore, doing these transformations should be safe.
# running these transformations on .s files reduces the
# amount of code by about 15-25%, but it also removes debugging
# information (sourceline directives).
# this speeds up game execution and makes the game smaller.
# currently, the optimizer takes input only from stdin and
# apply a single transformation at a time.
# a future optimization could be to cache code-chunks between
# jump labels and apply multiple transformation on the in-memory
# code.

import sys, re

class MultiLineMatcher():
	def __init__(self, regexes, matchfn, nomatchfn, fout=sys.stdout):
		self.matchfn = matchfn
		self.nomatchfn = nomatchfn
		self.regexes = regexes
		self.line_matches = 0
		self.saved_lines = None
		self.matches = None
		self.fout = fout

	def feed(self, line):
		line = line.rstrip('\n')
		m = self.regexes[self.line_matches].match(line)
		if m:
			if self.matches is None: self.matches = []
			if self.saved_lines is None: self.saved_lines = []
			self.matches.append(m)
			self.saved_lines.append(line)
			self.line_matches += 1
			if self.line_matches == len(self.regexes):
				self.matchfn(self, self.matches, self.saved_lines)
				self.matches = None
				self.line_matches = 0
				self.saved_lines = None
		else:
			self.line_matches = 0
			self.matches = None
			if self.saved_lines:
				for ln in self.saved_lines:
					self.nomatchfn(self, ln)
				self.saved_lines = None
			self.nomatchfn(self, line)

removed = 0
lineno = 0

def push_pop_matchfn(matcher, matches, lines):
	ws, reg1 = matches[0].groups(0)
	ws2, reg2 = matches[1].groups(0)
	global removed
	if reg1 == reg2: removed += 1
	else: matcher.fout.write("%smr %s, %s\n"%(ws, reg2, reg1))
	removed += 1

def output_fn(matcher, line):
	matcher.fout.write( "%s\n" %  line)

def sourceline_matchfn(matcher, matches, lines):
	global removed
	removed += 1

def cmp_mr_matchfn(matcher, matches, lines):
	global removed
	ws, op = matches[0].groups(0)
	matcher.fout.write( "%s%s ax, bx\n"%(ws, op))
	removed += 1

def cmp2_matchfn(matcher, matches, lines):
	def reverse_cmp(op):
		if op == 'gt': return 'lte'
		elif op == 'gte': return 'lt'
		elif op == 'lt': return 'gte'
		elif op == 'lte': return 'gt'
	global removed
	ws, val = matches[1].groups(0)
	ws2, op = matches[2].groups(0)
	matcher.fout.write("%sli bx, %s\n"%(ws, val))
	matcher.fout.write("%s%s ax, bx\n"%(ws, op)) # since we already switched registers, we don't need to switch the op too
	removed += 2

def load_negative_literal_matchfn(matcher, matches, lines):
	global removed
	ws, val = matches[1].groups(0)
	matcher.fout.write( "%smr bx, ax\n"%(ws))
	matcher.fout.write( "%sli ax, -%s\n"%(ws, val))
	removed += 4

def load_literal_matchfn(matcher, matches, lines):
	global removed
	ws, val = matches[1].groups(0)
	matcher.fout.write( "%smr bx, ax\n"%(ws))
	matcher.fout.write( "%sli ax, %s\n"%(ws, val))
	removed += 1

def axmar_matchfn(matcher, matches, lines):
	global removed
	ws, val = matches[0].groups(0)
	matcher.fout.write( "%sli bx, %s\n"%(ws, val))
	matcher.fout.write( "%s\n" % lines[2])
	matcher.fout.write( "%s\n" % lines[3])
	removed += 1

def mr_swap_matchfn(matcher, matches, lines):
	global removed
	matcher.fout.write( "%s\n" % lines[0])
	removed += 1

def memread4_swap_matchfn(matcher, matches, lines):
	global removed
	# # memread4 ax; mr bx, ax; li ax, 1
	ws, reg1 = matches[0].groups(0)
	ws, reg2a, reg2b = matches[1].groups(0)
	ws, reg3, val = matches[2].groups(0)
	if reg1 == reg2b and reg1 == reg3:
		matcher.fout.write("%smemread4 %s\n"%(ws, reg2a))
		matcher.fout.write("%sli %s, %s\n"%(ws, reg1, val))
		removed += 1
	else:
		for line in lines: matcher.fout.write("%s\n"%line)


def eprint(text): sys.stderr.write("%s\n"%text)

def usage():
	eprint("usage: %s [options] infile outfile"%sys.argv[0])
	eprint("")
	eprint("options: -cmp -pushpop -sourceline -lnl -ll -cmp2 -axmar -mrswap -m4s")
	eprint("at least one option required.\n")
	eprint("cmp: optimize cmp/mr")
	eprint("cmp2: optimize gt/gte/lt/lte (requires prev -ll pass)")
	eprint("pushpop: optimize push/pop")
	eprint("sourceline: remove sourceline statements")
	eprint("lnl: optimize negative literal loads")
	eprint("ll: optimize literal loads")
	eprint("m4s: optimize register swap after memread")

def get_matcher_name(matcher):
	return matcher_names[matcher]

removed_per_matcher = {}
def optimize(matcher, fin):
	global lineno
	global removed
	removed = 0
	while True:
		lineno = lineno + 1
		s = fin.readline()
		if s == '': break
		matcher.feed(s)
	mn = get_matcher_name(matcher)
	global removed_per_matcher
	removed_per_matcher[mn] = removed

all_matchers = {}
matcher_names = {}
def prep_matchers():
	global all_matchers
	global matcher_names
	all_matchers['pushpop_matcher'] = MultiLineMatcher([
		re.compile('(\s+)push ([a-z]+)'),
		re.compile('(\s+)pop ([a-z]+)'),
	], push_pop_matchfn, output_fn)

	all_matchers['sourceline_matcher'] = MultiLineMatcher([
		re.compile('(\s+)sourceline ([0-9]+)'),
	], sourceline_matchfn, output_fn)

	all_matchers['cmp_mr_matcher'] = MultiLineMatcher([
		re.compile('(\s+)(cmpeq|cmpne|lor|land) bx, ax'),
		re.compile('(\s+)mr ax, bx'),
	], cmp_mr_matchfn, output_fn)

	all_matchers['load_negative_literal_matcher'] = MultiLineMatcher([
		re.compile('(\s+)push ax$'),
		re.compile('(\s+)li ax, ([0-9]+)$'),
		re.compile('(\s+)li bx, 0$'),
		re.compile('(\s+)sub bx, ax$'),
		re.compile('(\s+)mr ax, bx$'),
		re.compile('(\s+)pop bx$'),
	], load_negative_literal_matchfn, output_fn)

	all_matchers['load_literal_matcher'] = MultiLineMatcher([
		re.compile('(\s+)push ax$'),
		re.compile('(\s+)li ax, ([0-9]+)$'),
		re.compile('(\s+)pop bx$'),
	], load_literal_matchfn, output_fn)

	all_matchers['cmp2_matcher'] = MultiLineMatcher([
		re.compile('(\s+)mr bx, ax'),
		re.compile('(\s+)li ax, ([0-9]+)'),
		re.compile('(\s+)(gt|gte|lt|lte) bx, ax'),
		re.compile('(\s+)mr ax, bx'),
	], cmp2_matchfn, output_fn)

	all_matchers['axmar_matcher'] = MultiLineMatcher([
		re.compile('(\s+)li ax, ([0-9]+)$'),
		re.compile('(\s+)mr bx, ax$'),
		re.compile('(\s+)li mar, (.+)$'),
		re.compile('(\s+)mr ax, mar$'),
	], axmar_matchfn, output_fn)

	all_matchers['mr_swap_matcher'] = MultiLineMatcher([
		re.compile('(\s+)mr ax, bx'),
		re.compile('(\s+)mr bx, ax'),
	], mr_swap_matchfn, output_fn)

	all_matchers['memread4_swap_matcher'] = MultiLineMatcher([
	# memread4 ax; mr bx, ax; li ax, 1
		re.compile('(\s+)memread4 ([a-d]x)'),
		re.compile('(\s+)mr ([a-d]x), ([a-d]x)'),
		re.compile('(\s+)li ([a-d]x), ([0-9]+)$'),
	], memread4_swap_matchfn, output_fn)

	for i in all_matchers.keys():
		matcher_names[all_matchers[i]] = i


def main():
	matcher_names = []
	if len(sys.argv) < 4: return usage()
	# -cmp -pushpop -sourceline -lnl -ll -cmp2 -axmar -mrswap
	for i in xrange(1, len(sys.argv)-2):
		if sys.argv[i] == "-cmp": matcher_names.append( 'cmp_mr_matcher')
		elif sys.argv[i] == "-pushpop": matcher_names.append( 'pushpop_matcher')
		elif sys.argv[i] == "-sourceline": matcher_names.append( 'sourceline_matcher')
		elif sys.argv[i] == "-lnl": matcher_names.append( 'load_negative_literal_matcher')
		elif sys.argv[i] == "-ll": matcher_names.append( 'load_literal_matcher')
		elif sys.argv[i] == "-cmp2": matcher_names.append( 'cmp2_matcher')
		elif sys.argv[i] == "-axmar": matcher_names.append( 'axmar_matcher')
		elif sys.argv[i] == "-mrswap": matcher_names.append( 'mr_swap_matcher')
		elif sys.argv[i] == "-m4s": matcher_names.append( 'memread4_swap_matcher')
		else: return usage()

	fn = sys.argv[len(sys.argv)-2]
	fin = open(fn, "r")
	fout = open(sys.argv[len(sys.argv)-1], "w")

	prep_matchers()
	import tempfile
	for mn in matcher_names:
		tmp = tempfile.TemporaryFile()
		m = all_matchers[mn]
		m.fout = tmp
		optimize(m, fin)
		tmp.seek(0)
		fin = tmp
	while 1:
		chunk = fin.read(4096)
		if chunk == '': break
		fout.write(chunk)

	s = ''
	total_removed = 0
	for i in removed_per_matcher.keys():
		if removed_per_matcher[i] == 0: continue
		total_removed += removed_per_matcher[i]
		s += "[%s:%d] " %(i[:len(i)-len("_matcher")], removed_per_matcher[i])
	if total_removed:
		sys.stdout.write( "%s: removed %d lines %s\n"%(fn, total_removed, s))


if __name__ == "__main__": main()
